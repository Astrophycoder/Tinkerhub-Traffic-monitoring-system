# -*- coding: utf-8 -*-
"""trafficmodel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zEuQWZL6Uc7i7ZXKR9yedZdUvPIWQxPa
"""

# Install required libraries
!pip install flask-ngrok pyngrok pandas scikit-learn tensorflow > /dev/null
!mkdir -p /content/datasets

from flask import Flask, jsonify, request
from flask_ngrok import run_with_ngrok
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.impute import SimpleImputer

app = Flask(__name__)
run_with_ngrok(app)

# Load datasets
traffic_df = pd.read_csv('copytraffic.csv')
rta_df = pd.read_csv('CopyRTA Dataset.csv')

# Handle missing values
def handle_missing_values(df):
    # Fill missing numerical values with median
    numerical_cols = df.select_dtypes(include=[np.number]).columns
    for col in numerical_cols:
        df[col].fillna(df[col].median(), inplace=True)

    # Fill missing categorical values with 'Unknown'
    categorical_cols = df.select_dtypes(include=['object']).columns
    for col in categorical_cols:
        df[col].fillna('Unknown', inplace=True)

    return df

rta_df = handle_missing_values(rta_df)

# Encode categorical features
label_encoders = {}
def encode_categorical(df, columns):
    for col in columns:
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col].astype(str))
        label_encoders[col] = le
    return df

# Train Accident Prediction Model
def train_accident_model():
    # Encode categorical columns
    categorical_cols = ['Road_surface_conditions', 'Light_conditions', 'Weather_conditions']
    rta_encoded = encode_categorical(rta_df, categorical_cols)

    # Prepare features and target
    X = rta_encoded[['Number_of_vehicles_involved', 'Road_surface_conditions', 'Light_conditions']]
    y = rta_encoded['Accident_severity']

    # Train model
    model = RandomForestClassifier()
    model.fit(X, y)
    return model

accident_model = train_accident_model()

# API Endpoints
@app.route('/api/traffic')
def get_traffic():
    return jsonify(traffic_df.sample(100).to_dict(orient='records'))

@app.route('/api/simulate', methods=['POST'])
def simulate():
    junction = request.json['junction']
    simulated = traffic_df.copy()
    simulated.loc[simulated['Junction'] == junction, 'Vehicles'] *= 3
    return jsonify(simulated.to_dict(orient='records'))

@app.route('/api/predict_accident', methods=['POST'])
def predict_accident():
    data = request.json
    # Encode input data
    encoded_data = {
        'Number_of_vehicles_involved': data['Number_of_vehicles_involved'],
        'Road_surface_conditions': label_encoders['Road_surface_conditions'].transform([data['Road_surface_conditions']])[0],
        'Light_conditions': label_encoders['Light_conditions'].transform([data['Light_conditions']])[0]
    }
    prediction = accident_model.predict([list(encoded_data.values())])
    return jsonify({'severity': int(prediction[0])})

if __name__ == '__main__':
    app.run()

from flask import Flask, jsonify, request
from flask_ngrok import run_with_ngrok
import pandas as pd
import numpy as np
from sklearn.ensemble import IsolationForest
from scipy.signal import butter, filtfilt, find_peaks

app = Flask(__name__)
run_with_ngrok(app)

# Initialize variables
heartbeat_alerts = []

# Heartbeat Anomaly Detection
def preprocess_ppg(signal, fs=100):
    signal = signal.dropna().values
    if len(signal) == 0:
        return None, None, None
    # Bandpass filter
    nyquist = 0.5 * fs
    low, high = 0.5 / nyquist, 5 / nyquist
    b, a = butter(5, [low, high], btype='band')
    filtered = filtfilt(b, a, signal)
    # Normalize
    filtered = (filtered - np.min(filtered)) / (np.max(filtered) - np.min(filtered))
    # Detect peaks
    peaks, _ = find_peaks(filtered, height=0.3, distance=fs*0.5)
    if len(peaks) < 2:
        return None, None, None
    heartbeats = [filtered[peaks[i]:peaks[i+1]] for i in range(len(peaks)-1)]
    return filtered, peaks, heartbeats

def detect_heartbeat_anomalies(heartbeats):
    features = []
    for hb in heartbeats:
        features.append({
            'heart_rate': len(hb) / (len(hb) / 100) * 60,
            'pulse_amplitude': np.max(hb) - np.min(hb),
            'pulse_width': len(hb) / 100
        })
    features_df = pd.DataFrame(features)
    model = IsolationForest(contamination=0.1)
    anomalies = model.fit_predict(features_df)
    return anomalies

# API Endpoints
@app.route('/api/heartbeat', methods=['POST'])
def heartbeat():
    signal = request.json['signal']
    filtered, peaks, heartbeats = preprocess_ppg(pd.Series(signal))
    if heartbeats:
        anomalies = detect_heartbeat_anomalies(heartbeats)
        if -1 in anomalies:
            heartbeat_alerts.append({"location": request.json['location'], "status": "danger"})
            return jsonify({"status": "danger", "message": "Abnormal heartbeat detected"})
    return jsonify({"status": "normal"})

@app.route('/api/alerts')
def get_alerts():
    return jsonify(heartbeat_alerts)

if __name__ == '__main__':
    app.run()

from IPython.display import HTML

admin_dashboard = """
<!DOCTYPE html>
<html>
<head>
    <title>Admin Dashboard</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"/>
    <style>
        #map { height: 500px; margin: 20px; }
        .alert { color: red; padding: 10px; }
        .controls { margin: 20px; }
        button { padding: 10px 20px; background: #4CAF50; color: white; border: none; border-radius: 5px; cursor: pointer; }
    </style>
</head>
<body>
    <h1>Admin Dashboard</h1>

    <div class="controls">
        <button onclick="simulate('Downtown')">Simulate Downtown</button>
        <button onclick="simulate('Main Square')">Simulate Main Square</button>
    </div>

    <div id="map"></div>
    <div id="alerts"></div>

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        const map = L.map('map').setView([51.505, -0.09], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);

        // Load traffic data
        async function loadTraffic() {
            const response = await fetch('/api/traffic');
            const data = await response.json();
            data.forEach(point => {
                L.marker([point.lat, point.lng])
                    .bindPopup(`${point.Junction}<br>Vehicles: ${point.Vehicles}`)
                    .addTo(map);
            });
        }

        // Simulate congestion
        async function simulate(junction) {
            await fetch('/api/simulate', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ junction })
            });
            loadTraffic();
        }

        // Load alerts
        async function loadAlerts() {
            const response = await fetch('/api/alerts');
            const alerts = await response.json();
            document.getElementById('alerts').innerHTML = alerts
                .map(alert => `<div class="alert">ðŸš¨ ${alert.message || alert.status}</div>`)
                .join('');
        }

        // Refresh every 5 seconds
        setInterval(() => {
            loadTraffic();
            loadAlerts();
        }, 5000);

        loadTraffic();
        loadAlerts();
    </script>
</body>
</html>
"""

# Display in Colab
display(HTML(admin_dashboard))

from IPython.display import HTML

user_app = """
<!DOCTYPE html>
<html>
<head>
    <title>User Safety App</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        button { padding: 20px; font-size: 24px; background: red; color: white; border: none; border-radius: 10px; cursor: pointer; }
        #status { margin-top: 20px; font-size: 18px; }
    </style>
</head>
<body>
    <h1>User Safety App</h1>
    <button onclick="checkHeartbeat()">ðŸš¨ Check Heartbeat</button>
    <div id="status"></div>

    <script>
        async function checkHeartbeat() {
            // Mock PPG signal for demo
            const ppgSignal = Array.from({length: 1000}, () => Math.random());
            const response = await fetch('/api/heartbeat', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ signal: ppgSignal, location: "User Location" })
            });
            const result = await response.json();
            document.getElementById('status').innerText = result.message;
            if (result.status === 'danger') {
                const confirmed = confirm('Are you in danger?');
                if (!confirmed) {
                    alert('Emergency alert sent to authorities!');
                }
            }
        }
    </script>
</body>
</html>
"""

# Display in Colab
display(HTML(user_app))

